<resources>
    <string name="app_name">Справочник Unity</string>
    <string name="tab_text_1">Главная</string>
    <string name="tab_text_2">Заметки</string>
    <string name="tab_text_3">Вопросы</string>

    //Название заметок
    <string-array name="nameNotes">
        <item>GameObject</item>
        <item>Компонент</item>
        <item>Prefab</item>
        <item>Игровое окно</item>
        <item>Окно проекта</item>
        <item>Сброс настроек компонента</item>
        <item>Вектор</item>
        <!--        <item>Batching</item>-->
        <item>Атрибут [SerializeField]</item>
        <item>Группировка объектов в окне иерархии</item>
        <item>Collider и Trigger</item>
        <item>Метод Update, FixedUpdate, LateUpdate</item>
        <item>FPS(Frames Per Seconds)</item>
        <item>Assets(Ассеты)</item>
        <item>Asset Store(Магазин ассетов)</item>
        <item>Time.deltaTime</item>
        <item>Константы направления Vector2 и Vector3</item>
        <item>Ошибка NullReferenceException</item>
        <item>Вид отображения игровой камеры как в окне сцены</item>
        <item>Свойство Flip в Sprite Render</item>
        <item>Методы GetComponent и GetComponentInChildren</item>
        <item>Композиция коллайдеров</item>
    </string-array>

    //Описание заметок
    <string-array name="notes">
        <item>\"GameObject\" - любой игровой объект в Unity который состоит из компонентов. У любого GameObject есть компонент Transform(у UI элементов Rect Transform) и его нельзя удалить.</item>
        <item>Компонент - это блок который добавляется на объект и наделяет его какими либо свойствами. Например за физику объекта отвечает компонент Rigidbody, а за перемещение объекта компонент Transform. Скрипт тоже компонент, но только при условии что он наследуется от класса MonoBehavior</item>
        <item>Prefab - это один из типов ресурсов <b>Unity</b>, предназначений для многократного использования и хранящийся в окне проекта. Префаб может быть добавлен в любое количество сцен и многократно в одну сцену. Когда префаб добавляется на сцену, создаётся его экземпляр. В окне иерархии название экземпляра <b>Prefab</b> будет выделено синим цветом. Например у вас есть монетка на сцене. Перетащив с окна иерархии в окно проекта вы сделаете его префабом и его название в окне иерархии станет синим. Далее перетаскивая с окна проекта Prefab монетки вы можете создать множество одинаковых монеток. Теперь изменяя настройки на одной монетки вы измените настройки на других монетках. Не забывайте сохранять изменения!</item>
        <item>Если вы делайте какие то изменение в Unity когда включен режим игры, то они не сохранятся. Для того чтобы не запутатся в режиме игры вы можете изменить цветовую схему при запуске игрового окна для этого зайдите \"Edit->Preferences->Colors->General\" и в  "Playmode tint" измените цвет.
</item>
        <item>Не забывайте создавать для каждого типа файлов свою папку. Например для скриптов Scripts, для спрайтов Sprites, для анимаций Animations и т.д. Это позволит вам в будущем не потеряться в проекте, когда будет очень много файлов</item>
        <item>Если вы хотите сбросить настройки компонента в начальное значение. Нажмите на значок шестиренки в правом верхнем углу компонента(в последней версии Unity три точки) и выберите Reset</item>
        <item>Вектора в Unity используются для изменения позиции объекта, вращения и масштабирования объекта. В Unity есть классы Vector2(x,y),Vector3(x,y,z) и Vector4(x,y,z,w). В основном используются Vector2 и Vector3</item>
        <!--        <item>Batching - это способ отрисовки объектов в рамках одного Draw Call(вызова отрисовки) у графического API для оптимизации. Есть Dynamic Batching - отрисовка динамических объектов и Static Batching - отрисовка статических(неподвижных) объектов. Например вы можете сделать так чтобы спрайты отрисовались за один Draw Call если поместите их в атлас(одно изображение для спрайтов)</item>-->
        <item>Атрибут SerializeField позволяет отобразить переменные с модификатором доступа private на панели инспектора</item>
        <item>Вы можете создать пустой объект и поместить туда другие объекты. Например у вас есть много объектов Platform. Вы можете создать пустой объект Platforms для этого нажмите правой кнопкой мыши на окне иерархии и выберите Create Empty и поместите туда все объекты Platform</item>
        <item>Если вы добавляете на ваш объект Collider, то он обретает свойство физического тела и через него нельзя будет пройти. Но вы можете изменить его на Trigger включив свойство Is Trigger у коллайдера и тогда через него можно будет пройти, но обработка столкновений все равно будет происходить</item>
        <item>Для оптимизации игры старайтесь ограничить вызовы методов Update, FixedUpdate, LateUpdate и использовать в скриптах где они действительно необходимы
</item>
        <item>FPS - количество сменяемых кадров за единицу времени. Как правило, чем выше показатель — тем лучше, так как движения будут плавнее и реалистичнее. При низких значениях наблюдаются подвисания (игра с постоянной кадровой частотой) или пропускания кадров (с переменной кадровой частотой). Минимально комфортная величина — 30 FPS, но например для шутеров комфортная частота кадров должна быть равна 60. Метод Update выполняется каждый кадр</item>
        <item>Assets(Ассеты) - набор ресурсов проекта, в который входит все, что нужно использовать на сцене игры: спрайты, модели, материалы, текстуры, скрипты и многое другое.</item>
        <item>В магазине Asset Store можно приобрести ассеты(ресурсы игры). Бывает как платные так и бесплатные ассеты.</item>
        <item>Это свойство предоставляет время между текущим и предыдущим кадром. Умножьте на общее значение скорости и вектора для плавного перемещения объекта в методе Update</item>
        <item>У векторов есть спецальный константы направление, такие как Vector3.up(Vector2.up), Vector3.down(Vector2.down), Vector3.right(Vector2.right), Vector3.left(Vector2.left) </item>
        <item>Эта ошибка возникает когда в скрипте идет обращение к пустой переменной которая ни к чему не ссылается. В консоли Unity кликнув 2 раза на ошибку вы перейдете к строчке в редакторе кода где возникла эта ошибка
</item>
        <item>Вы можете настроить вид отображения игровой камеры такое же как в окне сцене. Для этого выберите камеру в окне иерархии и зайдите в меню GameObject и выберите Align With View или нажмите горячие клавиши CTRL + Shift + F</item>
        <item>Вы можете развернуть спрайт объекта по X или Y c помощью свойства Flip у компонента Sprite Render</item>
        <item>Метод GetComponent&lt;название компонента&gt;() позволяет получить ссылку на компонент объекта. Метод GetComponentInChildren&lt;название компонента&gt;() позволяет получить ссылку на компонент дочернего объекта</item>
        <item>Вы можете на один объект повесить много коллайдеров. Например у вас игровой персонаж и вы бы хотели чтобы на ногах у него был отдельный коллайдер. Для этого внутри объекта нужно создать дочерний пустой объект Legs и добавить на него компонент коллайдера например Box Collider. Помните что много коллайдеров может плохо отразиться на оптимизацию игры.</item>
    </string-array>
</resources>
